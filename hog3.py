# Pedestrian Detection Default# use opencvimport cv2# The HOG detector returns slightly larger rectangles than the real objects.# So we slightly shrink the rectangles to get a nicer output.def draw_detections(img, rects, thickness = 1):    for x, y, w, h in rects:        pad_w, pad_h = int(0.15*w), int(0.05*h)        cv2.rectangle(img, (x+pad_w, y+pad_h), (x+w-pad_w, y+h-pad_h), (0, 255, 0), thickness)    # return imgdef visualize(args, img):    # write & save image    cv2.imshow('original', img) # write image    cv2.waitKey() # for keyboard binding    path = args.img_path.split('/')    cv2.imwrite('{}/det_{}'.format(path[0], path[1]), img) # save image    #cv2.destroyAllWindows() # clean updef pixelize(img, found):    # 人の数だけ処理を実行    if len(found) > 0:        for rect in found:            #矩形描画            cv2.rectangle(img, tuple(rect[0:2]),tuple(rect[0:2]+rect[2:4]), (255,255,255),3)            cut_img = img[rect[1]:rect[1]+rect[3],rect[0]:rect[0]+rect[2]]            cut_img = cv2.resize(cut_img,(rect[2]//20, rect[3]//20))            cut_img = cv2.resize(cut_img,(rect[2], rect[3]),cv2.INTER_NEAREST)            img[rect[1]:rect[1]+rect[3],rect[0]:rect[0]+rect[2]] = cut_img    print(found)def PD_face(args):    img = cv2.imread(args.img_path) # read image    cascade_path="/Users/tanimu//.pyenv/versions/miniconda3-latest/pkgs/opencv-3.3.1-py36h60a5f38_1/share/OpenCV/haarcascades/haarcascade_frontalface_default.xml"    cascade = cv2.CascadeClassifier(cascade_path)    facerect = cascade.detectMultiScale(img, scaleFactor=1.1, minNeighbors=1, minSize=(100, 100))    # draw_detections(img, facerect)    pixelize(img, facerect)    visualize(args, img)#Default detector (using INRIA Person Dataset)def PD_default(args):    img = cv2.imread(args.img_path) # read image    hog = cv2.HOGDescriptor() # derive HOG features    hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector()) # SVM    # pedestrian detection    if not img is None:        found, w = hog.detectMultiScale(img, hitThreshold=args.hit_thresh, winStride=(8,8), padding=(0,0), scale=1.05, finalThreshold=2)        pixelize(img, found)        # draw_detections(img, found) # draw rectangles        visualize(args, img)# Daimler detector (using Daimler Pedestrian Detection Benchmark Dataset)def PD_daimler(filename):    img = cv2.imread(filename) # read image    hog = cv2.HOGDescriptor((48,96), (16,16), (8,8), (8,8), 9) # derive HOG features    hog.setSVMDetector(cv2.HOGDescriptor_getDaimlerPeopleDetector()) # SVM    # pedestrian detection    found, w = hog.detectMultiScale(img, hitThreshold=0, winStride=(8,8), padding=(32,32), scale=1.05, finalThreshold=2)    draw_detections(img, found) # draw rectangles    visalize(args, img)if __name__ == '__main__':    import argparse    parser = argparse.ArgumentParser(description='input img path')    parser.add_argument('--img_path', type=str, default='images/test.jpg', help='img path')    parser.add_argument('--hit_thresh', type=float, default=0.0, help='hit threshold')    parser.add_argument('--model', type=str, default='face', help='which model you use')    args = parser.parse_args()    if args.model == 'face':        PD_face(args)    elif args.model == 'people':        PD_default(args)